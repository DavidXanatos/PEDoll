<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Commands.Help.Hook" xml:space="preserve">
    <value>安装一个钩子，并设定其激活时进行的操作。

hook
hook {[MODULE!]SYMBOL|0xADDR|*PATTERN}
     [--convention=CONVENTION] [--stack=STACK[,RETURN]]
     [--before [ACTION ...]] [--after [ACTION ...]]

不带参数执行本命令，则显示所有钩子的列表。
在已存在的钩子上重新安装钩子，将覆盖钩子的约定、栈平衡及操作设定。

MODULE		寻找符号SYMBOL时要搜索的模块。
		如果省略本参数，则搜索所有模块，取第一个找到的符号。
SYMBOL		待挂钩函数的符号名（如 WinExec 或 kernel32!Sleep）。
ADDR		待挂钩函数的虚拟地址（如 0x401000）。
PATTERN		待挂钩函数的十六进制特征码（如 *8B4C240885D2）。
CONVENTION	待挂钩函数的调用约定。可用的调用约定为：
		x86 客户端：stdcall（默认）, cdecl, fastcall
		x64 客户端：msvc（默认）, gcc
STACK		待挂钩函数返回时，栈顶指针的偏移量。默认值为0。
RETURN		驳回待挂钩函数的执行时，应设定的返回值。默认值为0。
ACTION		钩子被激活时应进行的操作。
		可用的操作为：
		--echo=ECHO			- 显示一个字符串。
		--dump=DUMPADDR,DUMPSIZE	- 转储内存数据。
		--ctx=CTXKEY,CTXVALUE		- 向上下文字典添加条目。
		--verdict=VERDICT		- 设定默认判定值。
		任一操作可出现不止一次。
ECHO		待显示的、可能包含表达式的字符串。
DUMPADDR	计算结果为`uword`类型的表达式，作为转储数据的地址。
DUMPSIZE	计算结果为整型的表达式，作为转储数据的长度。
CTXKEY		作为字典条目的键、可能包含表达式的字符串。
CTXVALUE	作为字典条目的值、可能包含表达式的字符串。
VERDICT		判定值。有关可能的值，请参考`help verdict`。
		如果省略本操作，进程将在钩子被激活时中断，等待用户判定。

字符串中的表达式将根据其计算结果的类型进行格式化：

无符号整型及`byte`：
	以零扩展的十六进制数。
有符号整型及`sbyte`：
	十进制数。
字符串：
	以双引号括起的字符串。
`char`：
	以单引号括起的字符。
`bool`：
	“True”或“False”。
上述类型值的数组：
	以花括号括起的、以逗号分隔的各元素格式化的结果。
任何其它类型：
	触发计算错误。

有关表达式的帮助信息，请输入`help eval`。
</value>
  </data>
  <data name="Threads.Client.MalformedPacket" xml:space="preserve">
    <value>libPuppet数据包格式错误。</value>
  </data>
  <data name="UI.Gui.Banner" xml:space="preserve">
    <value>PEDoll v{0} Indev</value>
  </data>
  <data name="Commands.HelpShort.Hook" xml:space="preserve">
    <value>hook	- (D) 安装一个钩子，并设定其激活时进行的操作。</value>
  </data>
  <data name="Threads.Client.Hooked" xml:space="preserve">
    <value>客户端“{0}”钩子激活：#{1} “{2}”-“{3}”阶段。</value>
  </data>
  <data name="Commands.Help.Eval" xml:space="preserve">
    <value>在当前钩子的上下文中计算表达式。

eval EXPR

EXPR		待计算的表达式。

“表达式”是指使用花括号括起的、符合C#语法的表达式，如{(uint)poi(ax)+4}。

下列命名空间中的类型：
	System
	System.Linq
	System.Collections.Generic
以及下列方法及字段，均可以在表达式中使用：

（类型别名） word
	与CPU字长等长的有符号整型（对于x86为`int`，对于x64为`long`）。
（类型别名） uword
	与CPU字长等长的无符号整型（对于x86为`uint`，对于x64为`ulong`）。
string str(uword PTR)
	返回指针PTR所指向的C语言风格字符串。
string wstr(uword PTR)
	返回指针PTR所指向的C语言风格宽字符字符串。
string ctx(string KEY)
	返回上下文字典中键KEY所对应的值。
byte[] mem(uword PTR, uint LEN)
	返回指针PTR所指向的、长度不超过LEN的内存数据。
uword poi(uword PTR)
	返回指针PTR所指向的`uword`值。
uword arg(uint INDEX)
	返回函数的第INDEX个（从零开始计数）参数的值。
int dump(byte[] BLOB)
	转储BLOB中的数据，并返回其在转储列表中的ID。
uword ax, cx, dx, bx, sp, bp, si, di, r8, r9
	对应的寄存器的值。只读。
	`r8`及`r9`仅在x64客户端上可用。
</value>
  </data>
  <data name="Commands.HelpShort.Dump" xml:space="preserve">
    <value>dump	- 显示或保存已转储的数据。</value>
  </data>
  <data name="UI.Cli.Format" xml:space="preserve">
    <value>&gt; {0}</value>
  </data>
  <data name="Threads.CmdEngine.TargetNotApplicable" xml:space="preserve">
    <value>请求的操作不适用于当前指定的目标。</value>
  </data>
  <data name="Threads.Client.Status.Hooked" xml:space="preserve">
    <value>激活</value>
  </data>
  <data name="Commands.Hook.Installed" xml:space="preserve">
    <value>钩子 #{0} “{1}”已安装于 {2} 。</value>
  </data>
  <data name="Commands.Help.Unhook" xml:space="preserve">
    <value>移除指定的钩子。

unhook ID

ID		钩子的ID。
</value>
  </data>
  <data name="Threads.Client.ActionError" xml:space="preserve">
    <value>操作“{0}”失败：{1}</value>
  </data>
  <data name="Commands.Hook.HookExists" xml:space="preserve">
    <value>警告：名称为“{0}”的钩子已经存在。覆盖其设置。</value>
  </data>
  <data name="Commands.HelpShort.Kill" xml:space="preserve">
    <value>kill	- (M) 终止PID或进程名对应的进程。</value>
  </data>
  <data name="Threads.Client.Type.Monitor" xml:space="preserve">
    <value>监控端</value>
  </data>
  <data name="Threads.Client.TypeMismatch" xml:space="preserve">
    <value>表达式计算结果类型不匹配。</value>
  </data>
  <data name="Commands.Help.End" xml:space="preserve">
    <value>结束客户端，终止其对应的进程。

end
</value>
  </data>
  <data name="Commands.Help.LoadDll" xml:space="preserve">
    <value>在当前进程的地址空间中装载模块。

loaddll MODULE

MODULE		传递给LoadLibrary()的模块文件路径。

在内部实现上，本命令在当前进程中创建一个新线程，并在其中调用LoadLibrary()。
使用本命令装载受控端模块（libDoll.dll）不会造成任何后果，但绝不能尝试。
</value>
  </data>
  <data name="UI.Cli.CtrlC" xml:space="preserve">
    <value>
[ 接受到 Ctrl-C 信号，按任意键结束命令引擎…… ]</value>
  </data>
  <data name="Threads.Client.Echo" xml:space="preserve">
    <value>echo: {0}</value>
  </data>
  <data name="Commands.IOError" xml:space="preserve">
    <value>I/O 异常 {0}: {1}</value>
  </data>
  <data name="Threads.EvalEngine.Empty" xml:space="preserve">
    <value>表达式为空。</value>
  </data>
  <data name="Commands.Help.Shell" xml:space="preserve">
    <value>启动系统命令解释器（%COMSPEC%，通常为CMD.EXE）。

shell [ARGUMENTS ...]

ARGUMENTS	传递给%COMSPEC%的参数。
</value>
  </data>
  <data name="Commands.Unhook.NotFound" xml:space="preserve">
    <value>指定的钩子不存在。</value>
  </data>
  <data name="Commands.HelpShort.Load" xml:space="preserve">
    <value>load	- 从脚本文件读取并执行命令。</value>
  </data>
  <data name="Threads.Client.StringTooLongWarning" xml:space="preserve">
    <value>警告：读取字符串：截断了过长的字符串。</value>
  </data>
  <data name="Commands.Target.CurrentTarget" xml:space="preserve">
    <value>当前目标为 #{0} “{1}”（{2}，{3}）。</value>
  </data>
  <data name="UI.Gui.Title.Monitor" xml:space="preserve">
    <value>当前客户端：#{0} {1}</value>
  </data>
  <data name="Commands.HelpShort.Eval" xml:space="preserve">
    <value>eval	- (D) 在当前钩子的上下文中计算表达式。</value>
  </data>
  <data name="Commands.HelpShort.Unhook" xml:space="preserve">
    <value>unhook	- (D) 移除指定的钩子。</value>
  </data>
  <data name="Commands.HelpShort.Help" xml:space="preserve">
    <value>help	- 提供命令的帮助信息。</value>
  </data>
  <data name="Commands.Hook.Header" xml:space="preserve">
    <value>#    入口点             名称
----+------------------+-------------------------</value>
  </data>
  <data name="Commands.Incomplete" xml:space="preserve">
    <value>字符串不完整。</value>
  </data>
  <data name="Commands.HelpShort.Ps" xml:space="preserve">
    <value>ps	- (M) 显示所有进程的列表。</value>
  </data>
  <data name="Commands.HelpShort.End" xml:space="preserve">
    <value>end	- (M/D) 结束客户端，终止其对应的进程。</value>
  </data>
  <data name="Commands.Invalid" xml:space="preserve">
    <value>命令`{0}`无效。输入`help {1}`获取帮助。</value>
  </data>
  <data name="Commands.Help.Break" xml:space="preserve">
    <value>中断或继续进程的执行。

break

本命令会使进程的执行状态在“中断”和“执行”间切换。
新受控端总是自动被受控端模块置于“中断”状态。
</value>
  </data>
  <data name="Commands.Ps.Format" xml:space="preserve">
    <value>{0,-8} {1}</value>
  </data>
  <data name="UI.Gui.Ready" xml:space="preserve">
    <value>初始化完毕，输入`help`获取更多信息。
通过GUI或`listen`命令启动监听器。
</value>
  </data>
  <data name="Commands.HelpShort.Shell" xml:space="preserve">
    <value>shell	- (M) 启动系统命令解释器。</value>
  </data>
  <data name="Commands.HelpShort.Rem" xml:space="preserve">
    <value>rem	- 将本行的剩余部分视为注释。</value>
  </data>
  <data name="Threads.CmdEngine.TargetNotAvailable" xml:space="preserve">
    <value>指定的目标已离线或不存在。</value>
  </data>
  <data name="Commands.HelpShort.Verdict" xml:space="preserve">
    <value>verdict	- (D) 判定当前激活的钩子。</value>
  </data>
  <data name="Threads.Client.DictionaryReadError" xml:space="preserve">
    <value>找不到上下文字典项“{0}”。</value>
  </data>
  <data name="Commands.Help.Kill" xml:space="preserve">
    <value>终止PID或进程名对应的进程。

kill PID
kill --all NAME

PID		终止ID为PID的进程。
		使用`ps`命令获取所有进程的PID。
NAME		终止进程名为NAME的所有进程。
</value>
  </data>
  <data name="Threads.Client.Status.Dead" xml:space="preserve">
    <value>离线</value>
  </data>
  <data name="Threads.Client.MemoryReadError" xml:space="preserve">
    <value>读取内存出错。</value>
  </data>
  <data name="Commands.Dump.Title" xml:space="preserve">
    <value>来自客户端“{1}”的转储数据 #{0}（{2} 字节），显示格式“{3}”：
</value>
  </data>
  <data name="Commands.HelpShort.Header" xml:space="preserve">
    <value>有关某个命令的详细信息，请输入`help COMMAND`。
所有命令均区分大小写。
</value>
  </data>
  <data name="Threads.Client.Eval" xml:space="preserve">
    <value>eval: {0} =&gt; {1}</value>
  </data>
  <data name="Threads.Client.Status.Alive" xml:space="preserve">
    <value>在线</value>
  </data>
  <data name="Commands.HelpShort.LoadDll" xml:space="preserve">
    <value>loaddll	- (D) 在当前进程的地址空间中装载模块。</value>
  </data>
  <data name="Commands.HelpShort.Listen" xml:space="preserve">
    <value>listen	- 启动监听器，等待客户端连接。</value>
  </data>
  <data name="Commands.Dump.Header" xml:space="preserve">
    <value>#    长度   客户端
----+------+---------------------------</value>
  </data>
  <data name="Commands.Dump.Format" xml:space="preserve">
    <value>{0,-4} {1,-6} {2}</value>
  </data>
  <data name="Commands.Help.Verdict" xml:space="preserve">
    <value>判定当前激活的钩子。

verdict {approve|reject|terminate}

approve		继续程序的执行。
reject		驳回对挂钩函数的调用并立即返回。
		有关栈平衡的信息，请参考`help hook`。
terminate	结束当前进程。
</value>
  </data>
  <data name="Commands.Help.Exit" xml:space="preserve">
    <value>退出主控端，结束所有已连接的客户端。

exit
</value>
  </data>
  <data name="Threads.Client.VerdictWait" xml:space="preserve">
    <value>verdict: 等待用户判定</value>
  </data>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="Splash" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\Splash.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="Threads.Client.MemoryReadWarning" xml:space="preserve">
    <value>警告：读取内存：数据长度 {1} 小于预期值 {0}。</value>
  </data>
  <data name="Threads.Client.Connected" xml:space="preserve">
    <value>来自 {0} 的客户端连接：#{1} “{2}”（{3}）。</value>
  </data>
  <data name="Threads.EvalEngine.CompileError" xml:space="preserve">
    <value>编译错误：{0}</value>
  </data>
  <data name="Threads.Client.StringReadWarning" xml:space="preserve">
    <value>警告：读取字符串：截断了不完整的字符串。</value>
  </data>
  <data name="Commands.Help.Help" xml:space="preserve">
    <value>提供命令的帮助信息。

help [COMMAND]

COMMAND		显示命令COMMAND的帮助信息。
		如果省略本参数，则显示所有命令的列表。
</value>
  </data>
  <data name="Commands.ParensMismatch" xml:space="preserve">
    <value>括号不匹配。</value>
  </data>
  <data name="Commands.Listen.AlreadyStarted" xml:space="preserve">
    <value>监听器已经启动。</value>
  </data>
  <data name="Commands.Listen.AvailableAddresses" xml:space="preserve">
    <value>可用的连接地址：
</value>
  </data>
  <data name="Commands.Hook.Format" xml:space="preserve">
    <value>{0,-4} {1,-18} {2}</value>
  </data>
  <data name="UI.Gui.Title.Doll" xml:space="preserve">
    <value>当前客户端：#{0} {1}</value>
  </data>
  <data name="Commands.HelpShort.Exit" xml:space="preserve">
    <value>exit	- 退出主控端，结束所有已连接的客户端。</value>
  </data>
  <data name="Threads.Client.Dump" xml:space="preserve">
    <value>dump: 数据转储 #{0} 已创建（{1} 字节）。</value>
  </data>
  <data name="Threads.Client.Type.Doll" xml:space="preserve">
    <value>受控端</value>
  </data>
  <data name="Commands.Help.Dump" xml:space="preserve">
    <value>显示或保存已转储的数据。

dump
dump ID [--format=FORMAT] [--save=SAVEFILE]

不带参数执行本命令，则显示所有已转储数据的列表。

ID		已转储数据的ID。
FORMAT		使用FORMAT格式显示或保存数据。可用的格式为：
		hex（默认）, raw, ansi, unicode, utf8, 8086, x86, x64
SAVEFILE	将数据保存到文件SAVEFILE。
		如果SAVEFILE存在，其内容将被覆盖。
</value>
  </data>
  <data name="UI.Gui.Dump.Format" xml:space="preserve">
    <value>Dump_#{0}_{1}.txt</value>
  </data>
  <data name="Commands.Help.Load" xml:space="preserve">
    <value>从脚本文件读取并执行命令。

load SCRIPT [ARGUMENTS ...]

SCRIPT		待执行的脚本文件。
		如果使用双引号括起本参数，SCRIPT被视为文件的完整路径；
		否则，SCRIPT被视为“Scripts”文件夹（优先查找）或“Scripts\API”
		文件夹中脚本文件的名称（可以不包含扩展名）。
ARGUMENTS	传递给脚本文件的参数。
		这些参数会被追加到脚本文件中任何以“*”结尾的命令之后。
</value>
  </data>
  <data name="Commands.HelpShort.Break" xml:space="preserve">
    <value>break	- (D) 中断或继续进程的执行。</value>
  </data>
  <data name="UI.Cli.Banner" xml:space="preserve">
    <value>PEDoll Controller v{0} Indev
</value>
  </data>
  <data name="Commands.HelpShort.Doll" xml:space="preserve">
    <value>doll	- (M) 创建新受控端。</value>
  </data>
  <data name="Commands.Help.Rem" xml:space="preserve">
    <value>将本行的剩余部分视为注释。

rem [...]
#[...]
</value>
  </data>
  <data name="Commands.Help.Doll" xml:space="preserve">
    <value>通过启动新进程或附加到进程的方式，创建新受控端。

doll CMDLINE
doll --attach PID

CMDLINE		运行CMDLINE，并将其作为新受控端。
PID		附加到ID为PID的进程，并将其作为新受控端。
		使用`ps`命令获取所有进程的PID。
</value>
  </data>
  <data name="Commands.Unknown" xml:space="preserve">
    <value>命令`{0}`未知。</value>
  </data>
  <data name="Commands.Help.Ps" xml:space="preserve">
    <value>显示所有进程的列表。

ps
</value>
  </data>
  <data name="Threads.Client.Verdict" xml:space="preserve">
    <value>verdict: 执行判定“{0}”。</value>
  </data>
  <data name="Threads.Client.ContextReadError" xml:space="preserve">
    <value>读取{0}号寄存器出错。</value>
  </data>
  <data name="Commands.Help.Target" xml:space="preserve">
    <value>获取或设定命令的操作目标。

target [ID]
target --doll
target --monitor

ID		操作目标的ID。
		如果省略本参数，则显示所有已连接客户端的列表。
--doll		设定操作目标为上一个受控端操作目标。
--monitor	设定操作目标为上一个监控端操作目标。
</value>
  </data>
  <data name="Commands.Target.Header" xml:space="preserve">
    <value>  #    名称                             类别     状态     PID      位数
-+----+--------------------------------+--------+--------+--------+----</value>
  </data>
  <data name="UI.Gui.Title.Hooked" xml:space="preserve">
    <value>当前钩子：#{0} “{1}”，“{2}”阶段</value>
  </data>
  <data name="Commands.Ps.Header" xml:space="preserve">
    <value>PID      进程名
--------+--------------------------------</value>
  </data>
  <data name="Commands.Win32Error" xml:space="preserve">
    <value>Win32 错误 {0}: {1}</value>
  </data>
  <data name="Commands.Unhook.Uninstalled" xml:space="preserve">
    <value>钩子 #{0} “{1}”已移除。</value>
  </data>
  <data name="Threads.EvalEngine.RuntimeError" xml:space="preserve">
    <value>运行时异常 {0}: {1}</value>
  </data>
  <data name="Commands.HelpShort.Target" xml:space="preserve">
    <value>target	- 获取或设定命令的操作目标。</value>
  </data>
  <data name="Threads.EvalEngine.InvalidType" xml:space="preserve">
    <value>无法计算类型为 {0} 的表达式。</value>
  </data>
  <data name="Commands.Target.Format" xml:space="preserve">
    <value>{0} {1,-4} {2,-32} {3,-5} {4,-6} {5,-8} {6,-4}</value>
  </data>
  <data name="Threads.Client.Disconnected" xml:space="preserve">
    <value>客户端“{0}”断开连接，原因：{1}</value>
  </data>
  <data name="Commands.Help.Listen" xml:space="preserve">
    <value>启动监听器并显示监听地址，等待客户端连接。

listen [--ipv6] [PORT]

--ipv6		监听IPv6连接而非IPv4连接。
PORT		监听端口。默认值为31415。

本命令只可被成功地执行一次；启动监听器后执行此命令会失败。
</value>
  </data>
  <data name="Threads.Client.Ctx" xml:space="preserve">
    <value>ctx: 上下文字典条目已创建：{0} =&gt; {1}。</value>
  </data>
  <data name="Controller" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\Controller.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
</root>