lexer replacement(?): https://github.com/skeeto/optparse

https://github.com/OmarAflak/Asynchronous-Socket-Class-C-Windows/blob/master/src/SocketServer.cpp

MAKE USE OF Win32 API multi-threading functions!
	InitializeCriticalSection / TryEnterCriticalSection / EnterCriticalSection / LeaveCriticalSection / DeleteCriticalSection
	CreateEvent / ResetEvent / WaitForSingleObject

DollHookDispatcher(void *pCodeStartAddr) ???
	All hooks' entry points, /*"marks"*/ and events are stored in a vector
	Hook assembly code just run "DollHookDispatcher(pCodeStartAddr)"

Hook Events:
	Before...
		return context-related data
		Allow/Deny(req. stack offset)/Terminate/Prompt
	After...
		return context-related data
		Continue/Terminate/Prompt

"After" works by changing/inline hooking the return address to another function
	requires [esp] == return address
*IMPORTANT*: The "binary hooker" PeDoll implements ALSO only work on procedures

CMD_HOOK_IAT
	procSize
		must > 0
	moduleSize ???
		> 0 - `module` contains the target module (GetModuleHandle())
		== 0 - `module` unknown; enumerate all loaded modules
			TEB / PEB? Since inject code will use it
	proc
		vardic-length ASCII string
	module ???
		vardic-length ASCII string

CMD_HOOK_BINARY
	codeSize
		must > 0
	code
		vardic-length byte array

registers to preserve:
	x86
		pushad/popad
		eax, ecx, edx, ebx, esp, ebp, esi, edi
	x64
		rax, rcx, rdx, rbx, rbp, rsp, rdi, rsi, r8, r9
	FP registers (sub ebp, 16; movdqu xmmword ptr[ebp], xmm0)
		xmm0, xmm1, xmm2, xmm3

calling conventions:
	x86
		cdecl/stdcall (stack)
		fastcall (rcx, rdx, stack)
	x64
		msvc (rcx, rdx, r8, r9, stack)
		gcc (rdi, rsi, rdx, rcx, r8, r9, stack)

----------

Things dedicated for a hook:

key == HookOEP
a Critical Section
hookOriginalSP
hookOriginalIP
hookDenySPOffset
hookDenyReturn
"Before..." operations
"After..." operations

operations struct:

verdict: uint
ctx: vector<ctxItem>

ctxItem struct:

register: uint (register number, or -1 for abs. mem address)
type: uint ((%d, %u, %x), %s, %S) (%f, %lf?)
poi: bool (eax+0, poi = false => eax, poi = true => [eax])
offset: ulong

example: %x@[esp-8] => {register: SP, type: NATIVEWORD, poi: true, offset: -8}

